%% Linear Programming Control (LPC) Simulation for Single-Link Pendulum (SP)
% This script implements the proposed LPC algorithm from the paper:
% "A Computationally Efficient Linear-Programming Control Framework for Constrained Input-Affine Nonlinear Systems"
% Author: Ali Safi, Ali Taghavian, Esmaeel Khanmirza, Fateme Namdarpour
% Repository: https://github.com/A-Safi/LPC
%
% States: x = [theta; theta_dot]
% Input : u = torque T
%
% Dependencies on path:
%   - Controller.m
%   - SP.m           (signature: [fx,gx] = SP(x, params))
%   - RungeKutta.m   (signature: x_next = RungeKutta(@SP, params, x, t, u))
%
% Sampling time is constant here (tmin = tmax = 0.01) to mirror the paper’s example.

clc;
clear;
% close all;

addpath("bin\")

% Output/selection matrix (measures theta_dot)
C = [0, 1];

% ----------------------- Initial Conditions -------------------------------
x(:,1)  = [0; 0];   % [theta; theta_dot]
time(1) = 0;
U(1)    = 0;

% ----------------------- Physical Parameters ------------------------------
% (Moved from 'global' to a params struct)
params.g = 9.8;     % gravity (m/s^2)
params.m = 0.5;     % mass (kg)
params.l = 0.3;     % length (m)
params.c = 0.1;     % damping coefficient (N·m·s/rad)

% ----------------------- Controller Gains & Constraints -------------------
K     = 5;      % scalar gain for desired error dynamics: theta_dot^+ = -K*(theta - ref)
dxmin = -3;     % min theta_dot
dxmax = +3;     % max theta_dot
umin  = -1.8;   % min torque
umax  =  1.8;   % max torque
tmin  = 0.01;   % fixed sampling lower bound
tmax  = 0.01;   % fixed sampling upper bound (= tmin => constant step)

% ----------------------- Reference ----------------------------------------
% Step in theta to pi at k=51 (after 50 samples)
ref = [zeros(1,50),  pi*ones(1,251)];

% ----------------------- Simulation ---------------------------------------
N = 250;
for k = 1:N
    % Nonlinear model (drift and input matrices)
    [fx, gx] = SP(x(:,k), params);

    % Desired post-update velocity (target for LPC):
    %   theta_dot^{+} = -K * (theta - ref)
    e     = x(1,k) - ref(k);
    dxhat = -K * e;

    % Solve LP -> p = [z; t; v], where v = u * t
    p = Controller( C*fx, C*gx, x(2,k), ...
                    dxmin, dxmax, umin, umax, tmin, tmax, dxhat );

    % Recover sampling time and input
    t = p(end-1);
    v = p(end);
    u = v / t;

    % Guard against infeasible/NaN results
    if any(isnan([u, t])) || t <= 0
        u = 0;
        t = tmin;
        disp('LP infeasible — applying zero input for one step.');
    end

    % State propagation
    x(:,k+1) = RungeKutta(@SP, params, x(:,k), t, u);

    % Logging
    U(k+1)       = u;
    time_diff(k) = t;
    time(k+1)    = time(k) + t;
end

%% ----------------------- Visualization -----------------------------------

figure(1)

% theta
subplot(4,1,1)
plot(time, x(1,:), 'b-', 'LineWidth', 1.2); hold on; grid on
plot(time, ref(1:length(time)), 'k-.', 'LineWidth', 1);
bnd = max(abs(x(1,:)));
ylim([-0.2, 1.1*bnd])
xlim([0, time(end)])
legend('Variable','Reference')
ylabel('$\theta$ (rad)', 'interpreter','latex','FontSize',12,'FontName','Times')
set(gca,'YTick', 0:pi/4:pi)
set(gca,'YTickLabel', {'0','\pi/4','\pi/2','3\pi/4','\pi'})

% theta_dot with bounds
subplot(4,1,2)
plot(time, x(2,:), 'b-', 'LineWidth', 1.2); hold on; grid on
plot(time,  dxmax*ones(1,length(time)), 'r--', 'LineWidth', 1.2);
plot(time,  dxmin*ones(1,length(time)), 'r--', 'LineWidth', 1.2);
ylabel('$\dot{\theta}$ (rad/s)', 'interpreter','latex','FontSize',12,'FontName','Times')
xlabel('$Time$ (sec)', 'interpreter','latex','FontSize',12,'FontName','Times')
bnd = max(abs(x(2,:)));
ylim([-1.1*bnd, 1.1*bnd])
xlim([0, time(end)])

% Input torque with bounds
subplot(4,1,3)
plot(time, U(1,:), 'b-', 'LineWidth', 1.2); hold on; grid on
plot(time, umax*ones(1,length(time)), 'r--', 'LineWidth', 1.2);
plot(time, umin*ones(1,length(time)), 'r--', 'LineWidth', 1.2);
ylabel('$T$ (N$\cdot$m)', 'interpreter','latex','FontSize',12,'FontName','Times')
xlabel('$Time$ (sec)', 'interpreter','latex','FontSize',12,'FontName','Times')
bnd = max(abs(U(1,:)));
ylim([-1.1*bnd, 1.1*bnd])
xlim([0, time(end)])

% Sampling time (constant here but plotted for consistency)
subplot(4,1,4)
plot(time(1:end-1), time_diff, 'b*', 'MarkerSize', 5); hold on; grid on; axis tight
plot(time, tmin*ones(1,length(time)), 'r--', 'LineWidth', 1.2);
plot(time, tmax*ones(1,length(time)), 'r--', 'LineWidth', 1.2);
ylabel('Sampling Time (sec)', 'interpreter','latex','FontSize',12,'FontName','Times')
xlabel('$Time$ (sec)', 'interpreter','latex','FontSize',12,'FontName','Times')
ylim([0, 0.02])
